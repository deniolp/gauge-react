{"version":3,"sources":["Gauge.js","GaugeComponent.js","App.js","index.js"],"names":["Gauge","value","min","max","label","units","backgroundArc","arc","innerRadius","outerRadius","startAngle","Math","PI","endAngle","cornerRadius","percent","scaleLinear","domain","range","percentScale","angle","clamp","angleScale","filledArc","colorScale","gradientSteps","ticks","map","markerLocation","offset","cos","sin","getCoordsOnArc","className","style","overflow","width","viewBox","join","id","gradientUnits","x1","x2","y2","color","index","key","stopColor","length","d","fill","y1","stroke","strokeWidth","cx","cy","r","transform","marginTop","fontSize","lineHeight","letterSpacing","fontWeight","format","GaugeComponent","minSize","maxSize","initialValue","React","useState","setValue","for","type","onChange","event","target","App","ReactDOM","render","document","getElementById"],"mappings":"4PA8HeA,EApHD,SAAC,GAMR,IAAD,IALJC,aAKI,MALI,GAKJ,MAJJC,WAII,MAJE,EAIF,MAHJC,WAGI,MAHE,IAGF,MAFJC,aAEI,oBADJC,aACI,gBACEC,EAAgBC,cACnBC,YAAY,KACZC,YAAY,GACZC,YAAYC,KAAKC,GAAK,GACtBC,SAASF,KAAKC,GAAK,GACnBE,aAAa,EALMP,GAQhBQ,EADeC,cAAcC,OAAO,CAACf,EAAKC,IAAMe,MAAM,CAAC,EAAG,GAChDC,CAAalB,GAKvBmB,EAJaJ,cAChBC,OAAO,CAAC,EAAG,IACXC,MAAM,EAAEP,KAAKC,GAAK,EAAGD,KAAKC,GAAK,IAC/BS,OAAM,EACKC,CAAWP,GACnBQ,EAAYhB,cACfC,YAAY,KACZC,YAAY,GACZC,YAAYC,KAAKC,GAAK,GACtBC,SAASO,GACTN,aAAa,EALEP,GAOZiB,EAAaR,cAAcC,OAAO,CAAC,EAAG,IAAIC,MAAM,CAAC,UAAW,YAC5DO,EAAgBD,EAAWE,MAAM,IAAIC,KAAI,SAAC1B,GAAD,OAAWuB,EAAWvB,MAE/D2B,EApCe,SAACR,GAAD,IAAQS,EAAR,uDAAiB,GAAjB,MAAwB,CAC7ClB,KAAKmB,IAAIV,EAAQT,KAAKC,GAAK,GAAKiB,EAChClB,KAAKoB,IAAIX,EAAQT,KAAKC,GAAK,GAAKiB,GAkCTG,CAAeZ,EAAO,MAE7C,OACE,yBAAKa,UAAU,SACb,yBACEC,MAAO,CAACC,SAAU,WAClBC,MAAM,MACNC,QAAS,EAAE,GAAI,EAAG,EAAG,GAAGC,KAAK,MAE7B,8BACE,oCACEC,GAAG,kBACHC,cAAc,iBACdC,GAAG,KACHC,GAAG,IACHC,GAAG,KAEFlB,EAAcE,KAAI,SAACiB,EAAOC,GAAR,OACjB,0BACEC,IAAKF,EACLG,UAAWH,EACXf,OAAM,UAAKgB,GAASpB,EAAcuB,OAAS,WAKnD,0BAAMC,EAAG3C,EAAe4C,KAAK,YAC7B,0BAAMD,EAAG1B,EAAW2B,KAAK,0BACzB,0BAAMC,GAAG,KAAKR,GAAG,QAAQS,OAAO,QAAQC,YAAY,UACpD,4BACEC,GAAI1B,EAAe,GACnB2B,GAAI3B,EAAe,GACnB4B,EAAE,MACFJ,OAAO,UACPC,YAAY,OACZH,KAAM1B,EAAWT,KAEnB,0BACEkC,EAAE,kgBACFQ,UAAS,iBACPrC,GAAS,IAAMT,KAAKC,IADb,4BAGTsC,KAAK,aAGT,yBACEhB,MAAO,CACLU,MAAO,UACPc,UAAW,QACXC,SAAU,MACVC,WAAY,MACZC,cAAe,QACfC,WAAY,QAGbC,YAAO,IAAPA,CAAY9D,MAGZG,GACD,yBACE8B,MAAO,CACLU,MAAO,UACPc,UAAW,QACXC,SAAU,QACVC,WAAY,QACZE,WAAY,QAGb1D,KAGFC,GACD,yBACE6B,MAAO,CACLU,MAAO,UACPgB,WAAY,QACZE,WAAY,QAGbzD,KChFI2D,EApCQ,SAAC,GAMjB,IAAD,IALJC,eAKI,MALM,EAKN,MAJJC,eAII,MAJM,IAIN,MAHJC,oBAGI,MAHW,GAGX,EAFJ/D,EAEI,EAFJA,MACAC,EACI,EADJA,MACI,EACsB+D,IAAMC,SAASF,GADrC,mBACGlE,EADH,KACUqE,EADV,KAKJ,OACE,yBAAKrC,UAAU,aACb,kBAAC,EAAD,CACEhC,MAAOA,EACPC,IAAK+D,EACL9D,IAAK+D,EACL9D,MAAOA,EACPC,MAAOA,IAET,2BAAOkE,IAAKnE,GACV,6CAEF,2BACEoE,KAAK,QACLvC,UAAU,QACVM,GAAInC,EACJF,IAAK+D,EACL9D,IAAK+D,EACLjE,MAAOA,EACPwE,SAtBe,SAACC,GACpBJ,EAASI,EAAMC,OAAO1E,YCmBX2E,MA5Bf,WACE,OACE,yBAAK3C,UAAU,YACb,kBAAC,EAAD,CACEgC,QAAS,EACTC,QAAS,IACTC,aAAc,GACd/D,MAAK,QACLC,MAAK,wBAEP,kBAAC,EAAD,CACE4D,QAAS,EACTC,QAAS,GACTC,aAAc,GACd/D,MAAK,aACLC,MAAK,eAEP,kBAAC,EAAD,CACE4D,QAAS,EACTC,QAAS,IACTC,aAAc,IACd/D,MAAK,WACLC,MAAK,mBCrBbwE,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.61fdf3ec.chunk.js","sourcesContent":["import React from 'react';\nimport {arc} from 'd3-shape';\nimport {scaleLinear} from 'd3-scale';\nimport {format} from 'd3-format';\n\nconst getCoordsOnArc = (angle, offset = 10) => [\n  Math.cos(angle - Math.PI / 2) * offset,\n  Math.sin(angle - Math.PI / 2) * offset,\n];\n\nconst Gauge = ({\n  value = 70,\n  min = 0,\n  max = 100,\n  label = `Label`,\n  units = `units`,\n}) => {\n  const backgroundArc = arc()\n    .innerRadius(0.65)\n    .outerRadius(1)\n    .startAngle(-Math.PI / 2)\n    .endAngle(Math.PI / 2)\n    .cornerRadius(1)();\n\n  const percentScale = scaleLinear().domain([min, max]).range([0, 1]);\n  const percent = percentScale(value);\n  const angleScale = scaleLinear()\n    .domain([0, 1])\n    .range([-Math.PI / 2, Math.PI / 2])\n    .clamp(true);\n  const angle = angleScale(percent);\n  const filledArc = arc()\n    .innerRadius(0.65)\n    .outerRadius(1)\n    .startAngle(-Math.PI / 2)\n    .endAngle(angle)\n    .cornerRadius(1)();\n\n  const colorScale = scaleLinear().domain([0, 1]).range(['#f2ca8d', '#eb7a1e']);\n  const gradientSteps = colorScale.ticks(10).map((value) => colorScale(value));\n\n  const markerLocation = getCoordsOnArc(angle, 1 - (1 - 0.65) / 2);\n\n  return (\n    <div className=\"gauge\">\n      <svg\n        style={{overflow: 'visible'}}\n        width=\"9em\"\n        viewBox={[-1, -1, 2, 1].join(' ')}\n      >\n        <defs>\n          <linearGradient\n            id=\"Gauge__gradient\"\n            gradientUnits=\"userSpaceOnUse\"\n            x1=\"-1\"\n            x2=\"1\"\n            y2=\"0\"\n          >\n            {gradientSteps.map((color, index) => (\n              <stop\n                key={color}\n                stopColor={color}\n                offset={`${index / (gradientSteps.length - 1)}`}\n              />\n            ))}\n          </linearGradient>\n        </defs>\n        <path d={backgroundArc} fill=\"#f0e5d3\" />\n        <path d={filledArc} fill=\"url(#Gauge__gradient)\" />\n        <line y1=\"-1\" y2=\"-0.65\" stroke=\"white\" strokeWidth=\"0.027\" />\n        <circle\n          cx={markerLocation[0]}\n          cy={markerLocation[1]}\n          r=\"0.2\"\n          stroke=\"#593c26\"\n          strokeWidth=\"0.01\"\n          fill={colorScale(percent)}\n        />\n        <path\n          d=\"M0.136364 0.0290102C0.158279 -0.0096701 0.219156 -0.00967009 0.241071 0.0290102C0.297078 0.120023 0.375 0.263367 0.375 0.324801C0.375 0.422639 0.292208 0.5 0.1875 0.5C0.0852272 0.5 -1.8346e-08 0.422639 -9.79274e-09 0.324801C0.00243506 0.263367 0.0803571 0.120023 0.136364 0.0290102ZM0.1875 0.381684C0.221591 0.381684 0.248377 0.356655 0.248377 0.324801C0.248377 0.292947 0.221591 0.267918 0.1875 0.267918C0.153409 0.267918 0.126623 0.292947 0.126623 0.324801C0.126623 0.356655 0.155844 0.381684 0.1875 0.381684Z\"\n          transform={`rotate(${\n            angle * (180 / Math.PI)\n          }) translate(-0.2, -0.33)`}\n          fill=\"#d97314\"\n        />\n      </svg>\n      <div\n        style={{\n          color: '#6b4623',\n          marginTop: '0.4em',\n          fontSize: '3em',\n          lineHeight: '1em',\n          letterSpacing: '0.1em',\n          fontWeight: '900',\n        }}\n      >\n        {format(',')(value)}\n      </div>\n\n      {!!label && (\n        <div\n          style={{\n            color: '#eb7a1e',\n            marginTop: '0.6em',\n            fontSize: '1.3em',\n            lineHeight: '1.3em',\n            fontWeight: '700',\n          }}\n        >\n          {label}\n        </div>\n      )}\n      {!!units && (\n        <div\n          style={{\n            color: '#eb7a1e',\n            lineHeight: '1.3em',\n            fontWeight: '300',\n          }}\n        >\n          {units}\n        </div>\n      )}\n    </div>\n  );\n};\nexport default Gauge;\n","import React from 'react';\n\nimport Gauge from './Gauge';\n\nconst GaugeComponent = ({\n  minSize = 0,\n  maxSize = 100,\n  initialValue = 70,\n  label,\n  units,\n}) => {\n  const [value, setValue] = React.useState(initialValue);\n  const handleChange = (event) => {\n    setValue(event.target.value);\n  };\n  return (\n    <div className=\"gaugeComp\">\n      <Gauge\n        value={value}\n        min={minSize}\n        max={maxSize}\n        label={label}\n        units={units}\n      ></Gauge>\n      <label for={label}>\n        <h6>Update value</h6>\n      </label>\n      <input\n        type=\"range\"\n        className=\"range\"\n        id={label}\n        min={minSize}\n        max={maxSize}\n        value={value}\n        onChange={handleChange}\n      ></input>\n    </div>\n  );\n};\n\nexport default GaugeComponent;\n","import React from 'react';\n\nimport GaugeComponent from './GaugeComponent';\n\nfunction App() {\n  return (\n    <div className=\"contaner\">\n      <GaugeComponent\n        minSize={0}\n        maxSize={100}\n        initialValue={50}\n        label={`Speed`}\n        units={`kilometers per hour`}\n      ></GaugeComponent>\n      <GaugeComponent\n        minSize={0}\n        maxSize={30}\n        initialValue={15}\n        label={`Visibility`}\n        units={`kilometers`}\n      ></GaugeComponent>\n      <GaugeComponent\n        minSize={0}\n        maxSize={4000}\n        initialValue={2000}\n        label={`Pressure`}\n        units={`hectopascals`}\n      ></GaugeComponent>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}